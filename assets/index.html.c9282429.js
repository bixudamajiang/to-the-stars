import{_ as e,o as s,c as a,e as n}from"./app.61d52ebc.js";const o={},t=n(`<h1 id="cloudflare-workers-types" tabindex="-1" data-s="27484"><a class="header-anchor" href="#cloudflare-workers-types" aria-hidden="true">#</a> Cloudflare Workers Types</h1><blockquote><p data-s="27485">\u26A0\uFE0F If you&#39;re upgrading from version 2, make sure to remove <code>webworker</code> from the <code>lib</code> array in your<br><code>tsconfig.json</code>. These types are now included in <code>@cloudflare/workers-types</code>.</p></blockquote><h2 id="install" tabindex="-1" data-s="27486"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> @cloudflare/workers-types
-- Or
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> @cloudflare/workers-types
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1" data-s="27487"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p data-s="27488">The following is a minimal <code>tsconfig.json</code> for use alongside this package:</p><p data-s="27489"><strong><code>tsconfig.json</code></strong></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES2020&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CommonJS&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ES2020&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@cloudflare/workers-types&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-bindings" tabindex="-1" data-s="27490"><a class="header-anchor" href="#using-bindings" aria-hidden="true">#</a> Using bindings</h3><p data-s="27491">It&#39;s recommended that you create an ambient type file for any bindings your Worker uses. Create a file named<br><code>bindings.d.ts</code> in your src directory:</p><p data-s="27492"><strong><code>bindings.d.ts</code></strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">MY_ENV_VAR</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">MY_SECRET</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> myKVNamespace<span class="token operator">:</span> KVNamespace<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="auto-generation" tabindex="-1" data-s="27493"><a class="header-anchor" href="#auto-generation" aria-hidden="true">#</a> Auto-Generation</h2><p data-s="27494">Types are automatically generated from the Workers runtime&#39;s source code on every release. However, these generated<br> types don&#39;t include any generics or overloads, so to improve ergonomics, some of them are overridden.</p><p data-s="27495">The <a href="./overrides"><code>overrides</code></a> directory contains partial TypeScript declarations. If an override has a different type<br> classification than its generated counterpart \u2013 for example, an <code>interface</code> is declared to override a generated <code>class</code><br> definition \u2013 then the override is used instead of the generated output. However, if they&#39;re the same type classification<br> (e.g. both the override and the generated output are using <code>class</code>), then their member properties are merged:</p><ul data-s="27496"><li>Members in the override but not in the generated type are included in the output</li><li>If a member in the override has the same name as one in the generated type, the generated one is removed from the<br> output, and the override is included instead</li><li>If the member is declared type <code>never</code> in the override, it is removed from the output</li></ul><p data-s="27497">If a named type override is declared as a type alias to <code>never</code>, that named type is removed from the output.</p><p data-s="27498">JSDoc comments from overrides will also be copied over to the output.</p><p data-s="27499">Comment overrides can also be written in Markdown. The <a href="./docs"><code>docs</code></a> directory contains these overrides.<br> 2<sup>nd</sup> level headings are the names of top level declarations (e.g. <code>## \`KVNamespace\`</code>),<br> 3<sup>rd</sup> level headings are for member names (e.g. <code>### \`KVNamespace#put\`</code>), and 4<sup>th</sup> level<br> headings correspond to JSDoc sections for members:</p><ul data-s="27500"><li><code>#### Parameters</code>: a list with parameters of the form <code>- \`param\`: param description</code>, these will be<br> formatted as <code>@param</code> tags</li><li><code>#### Returns</code>: contents will be copied as-is to the <code>@returns</code> tag</li><li><code>#### Examples</code>: fenced code blocks with the language set to <code>js</code>, <code>ts</code>, <code>javascript</code> or <code>typescript</code> will be copied<br> to <code>@example</code> tags</li></ul>`,20),r=[t];function i(d,c){return s(),a("div",null,r)}const l=e(o,[["render",i],["__file","index.html.vue"]]);export{l as default};
