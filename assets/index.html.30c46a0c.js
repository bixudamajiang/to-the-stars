import{_ as e,o as a,c as n,e as i}from"./app.61d52ebc.js";const t={},s=i(`<h1 id="custom-miniflare-cli" tabindex="-1" data-s="27537"><a class="header-anchor" href="#custom-miniflare-cli" aria-hidden="true">#</a> Custom Miniflare CLI</h1><p data-s="27538">This directory contains a simple wrapper around the programmatic Miniflare API,<br> which Wrangler spawns when running <code>wrangler dev</code> in local mode.</p><h2 id="building" tabindex="-1" data-s="27539"><a class="header-anchor" href="#building" aria-hidden="true">#</a> Building</h2><p data-s="27540">This CLI is built at the same time as Wrangler by running</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm run -w wrangler build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p data-s="27541">The output of the build is <code>miniflare-dist/index.mjs</code>.</p><h2 id="running" tabindex="-1" data-s="27542"><a class="header-anchor" href="#running" aria-hidden="true">#</a> Running</h2><p data-s="27543">The CLI expects a single command line argument which is the Miniflare options formatted as a string of JSON.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">node</span> --no-warnings ./packages/wrangler/miniflare-dist/index.mjs <span class="token string">&#39;{&quot;watch&quot;: true, &quot;script&quot;: &quot;&quot;}&#39;</span> <span class="token parameter variable">--log</span> VERBOSE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p data-s="27544">The <code>--log</code> argument is optional and takes one of Miniflare&#39;s LogLevels: &quot;NONE&quot;, &quot;ERROR&quot;, &quot;WARN&quot;, &quot;INFO&quot;, &quot;DEBUG&quot;, &quot;VERBOSE&quot;.<br> It defaults to <code>INFO</code>.</p><h2 id="debugging" tabindex="-1" data-s="27545"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h2><p data-s="27546">Simply place a breakpoint in the code and run the above command in the VS Code &quot;JavaScript Debug Terminal&quot;.<br> The code will stop at the breakpoint as expected.</p>`,12),d=[s];function r(o,l){return a(),n("div",null,d)}const u=e(t,[["render",r],["__file","index.html.vue"]]);export{u as default};
